"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[354],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(t),d=r,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return t?a.createElement(g,i(i({ref:n},p),{},{components:t})):a.createElement(g,i({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:1},i="1. Your First Bluefish Component",l={unversionedId:"tutorial-diagrams/bluefish-1",id:"tutorial-diagrams/bluefish-1",title:"1. Your First Bluefish Component",description:"This tutorial assumes you have some familiarity with React. We recommend you take a look at [React's",source:"@site/docs/tutorial-diagrams/bluefish-1.md",sourceDirName:"tutorial-diagrams",slug:"/tutorial-diagrams/bluefish-1",permalink:"/docs/tutorial-diagrams/bluefish-1",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-diagrams/bluefish-1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Diagrams",permalink:"/docs/category/tutorial---diagrams"},next:{title:"2. A Tree Diagram Component",permalink:"/docs/tutorial-diagrams/bluefish-2"}},s={},u=[{value:"Goals of This Tutorial",id:"goals-of-this-tutorial",level:2},{value:"Let&#39;s Draw a Rectangle!",id:"lets-draw-a-rectangle",level:2},{value:"Aligning Two Shapes",id:"aligning-two-shapes",level:2},{value:"Multiple Alignments",id:"multiple-alignments",level:2},{value:"Creating a Reusable Bluefish Component",id:"creating-a-reusable-bluefish-component",level:2}],p={toc:u};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1-your-first-bluefish-component"},"1. Your First Bluefish Component"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This tutorial assumes you have some familiarity with React. We recommend you take a look at ",(0,r.kt)("a",{parentName:"p",href:"https://beta.reactjs.org/learn"},"React's\nquick start guide first."))),(0,r.kt)("h2",{id:"goals-of-this-tutorial"},"Goals of This Tutorial"),(0,r.kt)("p",null,"By the end of this tutorial you will have built a sophisticated tree component!"),(0,r.kt)("p",null,"In the process you will learn how to"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"draw basic shapes"),(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," to tag components"),(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"Align"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Col"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"Row")),(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"Ref")," to refer to components in different parts of the component tree"),(0,r.kt)("li",{parentName:"ul"},"create your own Bluefish component"),(0,r.kt)("li",{parentName:"ul"},"gradually abstract a component so users can customize it more easily")),(0,r.kt)("p",null,"Here's the data we'll be visualizing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const treeData = {\n  name: 'A',\n  value: 7,\n  subtrees: [\n    {\n      name: 'B',\n      value: 4,\n      subtrees: [\n        { name: 'C', value: 2, },\n        { name: 'D', value: 2, },\n      ],\n    },\n    {\n      name: 'E',\n      value: 3,\n      subtrees: [\n        { name: 'F', value: 2, },\n        { name: 'G', value: 1, },\n      ],\n    },\n  ],\n};\n")),(0,r.kt)("h2",{id:"lets-draw-a-rectangle"},"Let's Draw a Rectangle!"),(0,r.kt)("p",null,"First, let\u2019s get something rendered to the screen! We always have to wrap our Bluefish code in a top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"SVG")," component."),(0,r.kt)("p",null,"Next, we make a ",(0,r.kt)("inlineCode",{parentName:"p"},"Rect")," component. The API for ",(0,r.kt)("inlineCode",{parentName:"p"},"Rect")," follows that of SVG."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Rect x={20} y={50} width={50} height={65} rx={5} fill={'cornflowerblue'} />\n</SVG>\n")),(0,r.kt)("h2",{id:"aligning-two-shapes"},"Aligning Two Shapes"),(0,r.kt)("p",null,"We can put two shapes in an ",(0,r.kt)("inlineCode",{parentName:"p"},"Align")," component, so they are aligned. In this case they are center\naligned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Align center>\n    <Text contents={'b'} fontSize={'30px'} />\n    <Rect x={20} y={50} width={50} height={65} rx={5} fill={'cornflowerblue'} />\n  </Align>\n</SVG>\n")),(0,r.kt)("h2",{id:"multiple-alignments"},"Multiple Alignments"),(0,r.kt)("p",null,"To add a label to the box, we need to add a second piece of text and align it to the rectangle."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Align center>\n    <Text contents={'b'} fontSize={'30px'} />\n    <Rect x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n  </Align>\n  <Align center to={'topCenter'}>\n    <Text contents={'@A'} fontSize={'12px'} />\n    <Rect x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n  </Align>\n</SVG>\n")),(0,r.kt)("p",null,"But this will render two background rectangles! That\u2019s not what we want. Instead, but how do we\nrefer to the rectangle again? We can use Bluefish\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," component to refer to existing components!\nTo do so, we give the rectangle a ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", background, and then we refer to it in the second ",(0,r.kt)("inlineCode",{parentName:"p"},"Align"),"\ncomponent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Align center>\n    <Text contents={'b'} fontSize={'30px'} />\n    <Rect name={'background'} x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n  </Align>\n  <Align center to={'topCenter'}>\n    <Text contents={'@A'} fontSize={'12px'} />\n    <Ref to={'background'} />\n  </Align>\n</SVG>\n")),(0,r.kt)("p",null,"We can also separate the primitive objects and alignments completely using refs! This can be useful\nfor organizing larger components."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"We currently need to wrap our components in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Group")," for reference resolution to work properly.\nThis is a bug.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Group>\n    <Text name={'value'} contents={'b'} fontSize={'30px'} />\n    <Rect name={'background'} x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n    <Text name={'label'} contents={'@A'} fontSize={'12px'} />\n    <Align center>\n      <Ref to={'value'} />\n      <Ref to={'background'} />\n    </Align>\n    <Align center to={'topCenter'}>\n      <Ref to={'label'} />\n      <Ref to={'background'} />\n    </Align>\n  </Group>\n</SVG>\n")),(0,r.kt)("h2",{id:"creating-a-reusable-bluefish-component"},"Creating a Reusable Bluefish Component"),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Currently in Bluefish, all names exist in a shared ",(0,r.kt)("em",{parentName:"p"},"global")," namespace. Names like ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"background"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," from different instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," components will clash with each other!"),(0,r.kt)("p",{parentName:"admonition"},"To avoid name clashes, consider using some sort of unique id, e.g. the ",(0,r.kt)("inlineCode",{parentName:"p"},"uuid")," package.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live noInline",live:!0,noInline:!0},"const Node = forwardRef(function _Node({ name, value }, ref) {\n  return (\n    <Group ref={ref}>\n      <Text name={'value'} contents={value} fontSize={'30px'} />\n      <Rect name={'background'} x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n      <Text name={'label'} contents={name} fontSize={'12px'} />\n      <Align center>\n        <Ref to={'value'} />\n        <Ref to={'background'} />\n      </Align>\n      <Align center to={'topCenter'}>\n        <Ref to={'label'} />\n        <Ref to={'background'} />\n      </Align>\n    </Group>\n  );\n})\n\nrender(\n  <SVG width={200} height={200}>\n    <Node name={'@A'} value={'b'} />\n  </SVG>\n)\n")))}c.isMDXComponent=!0}}]);