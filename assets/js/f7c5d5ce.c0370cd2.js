"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9426],{9715:(e,n,t)=>{t.d(n,{p:()=>a});var r=t(6319),l=t(7294);const i=e=>{const{sandpack:n}=(0,r.X3)();return(0,l.useEffect)((()=>{e.onCodeChange&&e.onCodeChange(n.files["/App.js"].code)}),[n.files["/App.js"].code]),l.createElement("div",null,e.flip?l.createElement(l.Fragment,null,e.hideCode?null:l.createElement(r._V,null),l.createElement(r.Gj,{style:{height:300,width:500}})):l.createElement(l.Fragment,null,l.createElement(r.Gj,{style:{height:210,width:445}}),e.hideCode?null:l.createElement(r._V,null)))},a=e=>l.createElement(r.oT,{dependencies:{"@bluefish-js/solid":"latest","babel-preset-solid":"latest","solid-js":"latest"},devDependencies:{"@babel/core":"7.2.0","parcel-bundler":"^1.6.1"},environment:"parcel",options:{visibleFiles:["/App.js"],activeFile:"/App.js"},files:{"/App.js":e.code,"/index.js":'import { render } from "solid-js/web";\nimport App from "./App";\n\nrender(App, document.getElementById("app"));',"/index.html":'<!DOCTYPE html>\n<html>\n\n<head>\n\t<title>Solid Demo</title>\n\t<meta charset="UTF-8" />\n</head>\n\n<body>\n\t<div id="app"></div>\n\n\t<script src="index.js">\n\t<\/script>\n</body>\n\n</html>',"/package.json":{code:JSON.stringify({name:"solid-hello-world",version:"1.0.0",description:"",main:"index.html",scripts:{start:"parcel index.html --open",build:"parcel build index.html"},dependencies:{"@bluefish-js/solid":"latest","babel-preset-solid":"latest","solid-js":"latest"},devDependencies:{"@babel/core":"7.2.0","parcel-bundler":"^1.6.1"},keywords:[]})},"/.babelrc":{code:JSON.stringify({presets:["babel-preset-solid"]})}}},l.createElement(i,e))},6084:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(7294),l=t(897),i=t(9715);const a=(0,r.memo)(i.p),o=e=>{let{starterCode:n,children:t}=e;const[i,o]=(0,r.useState)(n),[s,d]=(0,r.useState)(0),c=r.Children.map(t,((e,n)=>r.isValidElement(e)?r.cloneElement(e,{setCode:o}):e));return r.createElement("div",{style:{display:"grid",gridTemplateColumns:"50% 50%",marginTop:"10vh"}},r.createElement("div",null,r.createElement(l.k,{offset:.3,onStepEnter:e=>{let{data:n}=e;d(n)}},r.Children.map(c,((e,n)=>r.createElement(l.h,{data:n,key:n},r.createElement("div",{style:{marginTop:0===n?"10vh":"0",marginBottom:"20vh",opacity:s===n?1:.2}},e)))))),r.createElement("div",{style:{position:"sticky",top:"7vh",height:"100vh"}},r.createElement(a,{code:i,flip:!0})))}},9033:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(7294);const l=e=>{let{children:n,showMe:t,setCode:l}=e;return r.createElement(r.Fragment,null,n,t?r.createElement("button",{className:"button button--secondary button--md",onClick:()=>{l&&l(t)}},"Show Me"):null)}},8598:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>d,metadata:()=>p,toc:()=>k});var r=t(7462),l=(t(7294),t(3905)),i=(t(6319),t(4621));var a=t(9715),o=(t(4866),t(5162),t(6084)),s=t(9033);const d={sidebar_position:2,hide_table_of_contents:!0},c="Learn Bluefish",p={unversionedId:"get-started/learn",id:"get-started/learn",title:"Learn Bluefish",description:"<div",source:"@site/docs/get-started/learn.mdx",sourceDirName:"get-started",slug:"/get-started/learn",permalink:"/docs/get-started/learn",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/get-started/learn.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,hide_table_of_contents:!0},sidebar:"getStarted",previous:{title:"Run Bluefish",permalink:"/docs/get-started/run"},next:{title:"Intermediate Bluefish",permalink:"/docs/get-started/intermediate"}},u={},k=[{value:"1. Make a Circle",id:"1-make-a-circle",level:2},{value:"2. Add the Other Planets",id:"2-add-the-other-planets",level:3},{value:"3. Put Circles in a Row",id:"3-put-circles-in-a-row",level:2},{value:"4. Add a Background",id:"4-add-a-background",level:2},{value:"5. Add a Label",id:"5-add-a-label",level:2},{value:"6. Add an Arrow",id:"6-add-an-arrow",level:2},{value:"7. Improve the label spacing.",id:"7-improve-the-label-spacing",level:2},{value:"Simple Variations",id:"simple-variations",level:2}],h={toc:k};function f(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"learn-bluefish"},"Learn Bluefish"),(0,l.kt)("div",{style:{display:"grid",gridTemplateColumns:"50% 50%",marginBottom:"10vh"}},(0,l.kt)("div",null,"In this short tutorial, you'll learn how to use Bluefish to make the planets diagram!",(0,l.kt)("p",null,"The planets diagram consists of a row of four circles that represent the first four terrestrial\nplanets. There is box behind them and a label for Mercury. There is also an arrow pointing from the\nlabel to Mercury."),(0,l.kt)("admonition",{title:"You will learn",type:"note"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"How to write a Bluefish specification using JSX."),(0,l.kt)("li",{parentName:"ul"},"How to use common Bluefish elements (like ",(0,l.kt)("inlineCode",{parentName:"li"},"Circle"),") and relations (like ",(0,l.kt)("inlineCode",{parentName:"li"},"Align"),")."),(0,l.kt)("li",{parentName:"ul"},"How to use the ",(0,l.kt)("inlineCode",{parentName:"li"},"Ref")," component to reference other components.")))),(0,l.kt)("div",null,(0,l.kt)(a.p,{code:i.Z,hideCode:!0,mdxType:"CodeEditor"}))),(0,l.kt)("hr",null),(0,l.kt)("h1",{id:"writing-bluefish-specifications-with-jsx"},"Writing Bluefish Specifications with JSX"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("strong",{parentName:"p"},"Bluefish's JSX syntax is only available in SolidJS environments.")," If you are working in other environments\nlike Svelte or Observable, you will instead need to use Bluefish's function syntax."),(0,l.kt)("p",{parentName:"admonition"},"(This section of the tutorial is based on ",(0,l.kt)("a",{parentName:"p",href:"https://react.dev/learn"},"React's documentation"),".)")),(0,l.kt)("p",null,"To write a Bluefish ",(0,l.kt)("em",{parentName:"p"},"specification")," (or ",(0,l.kt)("em",{parentName:"p"},"spec"),"), you typically use ",(0,l.kt)("em",{parentName:"p"},"JSX")," syntax. JSX is a syntax extension to JavaScript that lets\nyou write HTML-like code in JavaScript. For example, the following is JSX code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<h1>Hello, world!</h1>\n")),(0,l.kt)("p",null,"We typically call an element like ",(0,l.kt)("inlineCode",{parentName:"p"},"h1")," a ",(0,l.kt)("em",{parentName:"p"},"component"),". Components are the building blocks of Bluefish\nspecifications."),(0,l.kt)("p",null,"JSX is stricter than HTML. You have to close tags like ",(0,l.kt)("inlineCode",{parentName:"p"},"<br />"),". Your component also can't return\nmultiple JSX tags. You have to wrap them into a shared parent, like a ",(0,l.kt)("inlineCode",{parentName:"p"},"<div>...</div>")," or an empty\n",(0,l.kt)("inlineCode",{parentName:"p"},"<>...</>")," wrapper:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<>\n  <h1>Hello, world!</h1>\n  <br />\n  <p>This is a paragraph.</p>\n</>\n")),(0,l.kt)("p",null,"Unlike built-in HTML components, Bluefish components are written with capital letters, like ",(0,l.kt)("inlineCode",{parentName:"p"},"Circle"),"\nor ",(0,l.kt)("inlineCode",{parentName:"p"},"Row"),". Bluefish components can only be used within a Bluefish specification, which is scoped by a\n",(0,l.kt)("inlineCode",{parentName:"p"},"<Bluefish>")," component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Bluefish>\n  <Circle cx={20} cy={30} r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n</Bluefish>\n')),(0,l.kt)("h1",{id:"your-first-bluefish-diagram"},"Your First Bluefish Diagram"),(0,l.kt)(o.Z,{starterCode:'import { Bluefish, Group, Row, Circle, Text, Ref, Background, Arrow, Col, Align, Distribute } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Text>TODO: Starting writing your code here!</Text>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',mdxType:"Scrolly"},(0,l.kt)(s.Z,{showMe:'import { Bluefish, Group, Row, Circle, Text, Ref, Background, Arrow, Col, Align, Distribute } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Circle cx={20} cy={30} r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n    </Bluefish>\n  );\n};\n\nexport default App;\n',mdxType:"Step"},(0,l.kt)("h2",{id:"1-make-a-circle"},"1. Make a Circle"),(0,l.kt)("p",null,"It's time to add your first Bluefish component!\nThe first thing we'll do is draw the planet Mercury.\nReplace the ",(0,l.kt)("inlineCode",{parentName:"p"},"Text")," component in the editor with the code below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Circle cx={20} cy={30} r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n'))),(0,l.kt)(s.Z,{showMe:'import { Bluefish, Group, Row, Circle, Text, Ref, Background, Arrow, Col, Align, Distribute } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Circle cx={20} cy={30} r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n      <Circle cx={100} cy={30} r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n      <Circle cx={160} cy={30} r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n      <Circle cx={280} cy={30} r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n    </Bluefish>\n  );\n};\n\nexport default App;\n',mdxType:"Step"},(0,l.kt)("h3",{id:"2-add-the-other-planets"},"2. Add the Other Planets"),(0,l.kt)("p",null,"Now we can add the other planets. Append this code below the Mercury circle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Circle cx={100} cy={30} r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n<Circle cx={160} cy={30} r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n<Circle cx={280} cy={30} r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n')),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"It's hard to make the circles evenly spaced by hand. See if you can do it!"))),(0,l.kt)(s.Z,{showMe:'import { Bluefish, Group, Row, Circle, Text, Ref, Background, Arrow, Col, Align, Distribute } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Row spacing={50}>\n        <Circle r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n        <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n        <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n        <Circle r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n      </Row>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',mdxType:"Step"},(0,l.kt)("h2",{id:"3-put-circles-in-a-row"},"3. Put Circles in a Row"),(0,l.kt)("p",null,"Instead of placing the circles manually, we can use a ",(0,l.kt)("inlineCode",{parentName:"p"},"Row")," component to position them.\nAdd the ",(0,l.kt)("inlineCode",{parentName:"p"},"Row")," component to the diagram and put the ",(0,l.kt)("inlineCode",{parentName:"p"},"Circle"),"s inside it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"<Row spacing={50}>circles go here</Row>\n")),(0,l.kt)("p",null,"Then delete the positions (",(0,l.kt)("inlineCode",{parentName:"p"},"cx")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"cy"),") on the ",(0,l.kt)("inlineCode",{parentName:"p"},"Circle"),"s. For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Circle cx={20} cy={30} r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n')),(0,l.kt)("p",null,"should become"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Circle r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n')),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Try changing the spacing or the size of the circles. What happens?"))),(0,l.kt)(s.Z,{showMe:'import { Bluefish, Group, Row, Circle, Text, Ref, Background, Arrow, Col, Align, Distribute } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Background padding={20}>\n        <Row spacing={50}>\n          <Circle r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n          <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n          <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n          <Circle r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n        </Row>\n      </Background>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',mdxType:"Step"},(0,l.kt)("h2",{id:"4-add-a-background"},"4. Add a Background"),(0,l.kt)("p",null,"To add a background, we can wrap the ",(0,l.kt)("inlineCode",{parentName:"p"},"Row")," in a ",(0,l.kt)("inlineCode",{parentName:"p"},"Background")," component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"<Background padding={20}>row goes here</Background>\n"))),(0,l.kt)(s.Z,{showMe:'import { Bluefish, Group, Row, Circle, Text, Ref, Background, Arrow, Col, Align, Distribute } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Background padding={20}>\n        <Row spacing={50}>\n          <Circle id="mercury" r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n          <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n          <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n          <Circle r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n        </Row>\n      </Background>\n      <Col spacing={20}>\n        <Text>Mercury</Text>\n        <Ref refId="mercury" />\n      </Col>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',mdxType:"Step"},(0,l.kt)("h2",{id:"5-add-a-label"},"5. Add a Label"),(0,l.kt)("p",null,"Now it's time to add a label to the Mercury circle. So far, we've been building a hierarchical tree\nof components. But now we need to reference the circle that's in the row in order to position it."),(0,l.kt)("p",null,"To do so, we'll first ",(0,l.kt)("em",{parentName:"p"},"name")," the circle, then we'll ",(0,l.kt)("em",{parentName:"p"},"reference")," it later in the code. To name the\nfirst circle in the row, we'll add an ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," prop to it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Circle id="mercury" ... />\n')),(0,l.kt)("p",null,"Then we can add a label by making a ",(0,l.kt)("inlineCode",{parentName:"p"},"Col")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"Text")," for the label and a ",(0,l.kt)("inlineCode",{parentName:"p"},"Ref")," to the planet.\nPlace this below the ",(0,l.kt)("inlineCode",{parentName:"p"},"Background")," component, but inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"Bluefish")," component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Col spacing={20}>\n  <Text>Mercury</Text>\n  <Ref refId="mercury" />\n</Col>\n'))),(0,l.kt)(s.Z,{showMe:'import { Bluefish, Group, Row, Circle, Text, Ref, Background, Arrow, Col, Align, Distribute } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Background padding={20}>\n        <Row spacing={50}>\n          <Circle id="mercury" r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n          <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n          <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n          <Circle r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n        </Row>\n      </Background>\n      <Col spacing={20}>\n        <Text id="label">Mercury</Text>\n        <Ref refId="mercury" />\n      </Col>\n      <Arrow>\n        <Ref refId="label" />\n        <Ref refId="mercury" />\n      </Arrow>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',mdxType:"Step"},(0,l.kt)("h2",{id:"6-add-an-arrow"},"6. Add an Arrow"),(0,l.kt)("p",null,"Now let's draw an arrow from the label to the planet. To do so, we'll first name the label:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Text id="label">Mercury</Text>\n')),(0,l.kt)("p",null,"Then we'll add an ",(0,l.kt)("inlineCode",{parentName:"p"},"Arrow")," component:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Arrow>\n  <Ref refId="label" />\n  <Ref refId="mercury" />\n</Arrow>\n'))),(0,l.kt)(s.Z,{showMe:'import { Bluefish, Group, Row, Circle, Text, Ref, Background, Arrow, Col, Align, Distribute } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Background id="planets" padding={20}>\n        <Row spacing={50}>\n          <Circle id="mercury" r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n          <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n          <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n          <Circle r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n        </Row>\n      </Background>\n      <Align alignment="centerX">\n        <Text id="label">Mercury</Text>\n        <Ref refId="mercury" />\n      </Align>\n      <Distribute direction="vertical" spacing={20}>\n        <Ref refId="label" />\n        <Ref refId="planets" />\n      </Distribute>\n      <Arrow>\n        <Ref refId="label" />\n        <Ref refId="mercury" />\n      </Arrow>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',mdxType:"Step"},(0,l.kt)("h2",{id:"7-improve-the-label-spacing"},"7. Improve the label spacing."),(0,l.kt)("p",null,"We want the label to always be outside the background box, but right now the label is spaced\nrelative to the planet. We can replace the ",(0,l.kt)("inlineCode",{parentName:"p"},"Col")," component with horizontal ",(0,l.kt)("inlineCode",{parentName:"p"},"Align")," and vertical\n",(0,l.kt)("inlineCode",{parentName:"p"},"Distribute")," to position the label more precisely."),(0,l.kt)("p",null,"First, replace the ",(0,l.kt)("inlineCode",{parentName:"p"},"Col")," component with an ",(0,l.kt)("inlineCode",{parentName:"p"},"Align"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Align alignment="centerX">Keep the same children as Col</Align>\n')),(0,l.kt)("p",null,"Then we'll name the planets:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Background id="planets" ... >\n  ...\n</Background>\n')),(0,l.kt)("p",null,"Then add a ",(0,l.kt)("inlineCode",{parentName:"p"},"Distribute"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<Distribute direction="vertical" spacing={20}>\n  <Ref refId="label" />\n  <Ref refId="planets" />\n</Distribute>\n')))),(0,l.kt)(o.Z,{starterCode:'import { Bluefish, Group, Row, Col, Circle, Text, Ref, Background, Arrow, Align, Distribute, Rect } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Background padding={20}>\n        <Row spacing={50}>\n          <Circle id="mercury" r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n          <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n          <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n          <Circle r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n        </Row>\n      </Background>\n      <Align alignment="centerX">\n        <Text id="label">Mercury</Text>\n        <Ref refId="mercury" />\n      </Align>\n      <Distribute direction="vertical" spacing={60}>\n        <Ref refId="label" />\n        <Ref refId="mercury" />\n      </Distribute>\n      <Arrow>\n        <Ref refId="label" />\n        <Ref refId="mercury" />\n      </Arrow>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',mdxType:"Scrolly"},(0,l.kt)(s.Z,{hideShowMe:!0,mdxType:"Step"},(0,l.kt)("h2",{id:"simple-variations"},"Simple Variations"),(0,l.kt)("p",null,'Here are some simple variations on the diagram to test your knowledge. If you want to reveal the\nanswer, click "Open Sandbox" on the variation. We\'ve provided the solution to the tutorial above in the sandbox on\nyour right.'),(0,l.kt)(a.p,{code:'import {\n  Bluefish,\n  Group,\n  Row,\n  Col,\n  Circle,\n  Text,\n  Ref,\n  Background,\n  Arrow,\n  Align,\n  Distribute,\n  Rect,\n} from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Background padding={20}>\n        <Row spacing={50}>\n          <Circle id="mercury" r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n          <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n          <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n          <Circle r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n        </Row>\n      </Background>\n      <Align alignment="centerX">\n        <Text id="label">Mercury</Text>\n        <Ref refId="mercury" />\n      </Align>\n      <Distribute direction="vertical" spacing={60}>\n        <Ref refId="mercury" />\n        <Ref refId="label" />\n      </Distribute>\n      <Arrow>\n        <Ref refId="label" />\n        <Ref refId="mercury" />\n      </Arrow>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',hideCode:!0,mdxType:"CodeEditor"}),(0,l.kt)(a.p,{code:'import {\n  Bluefish,\n  Group,\n  Row,\n  Col,\n  Circle,\n  Text,\n  Ref,\n  Background,\n  Arrow,\n  Align,\n  Distribute,\n  Rect,\n} from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Row spacing={50}>\n        <Circle id="mercury" r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n        <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n        <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n        <Circle r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n      </Row>\n      <Align alignment="centerX">\n        <Text id="label">Mercury</Text>\n        <Ref refId="mercury" />\n      </Align>\n      <Distribute direction="vertical" spacing={60}>\n        <Ref refId="label" />\n        <Ref refId="mercury" />\n      </Distribute>\n      <Background>\n        <Ref refId="label" />\n        <Ref refId="mercury" />\n      </Background>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',hideCode:!0,mdxType:"CodeEditor"}),(0,l.kt)(a.p,{code:'import {\n  Bluefish,\n  Group,\n  Row,\n  Col,\n  Circle,\n  Text,\n  Ref,\n  Background,\n  Arrow,\n  Align,\n  Distribute,\n  Rect,\n} from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      <Row spacing={50}>\n        <Circle r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n        <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n        <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n        <Circle id="mars" r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n      </Row>\n      <Align alignment="centerX">\n        <Text id="label">Mars</Text>\n        <Ref refId="mars" />\n      </Align>\n      <Distribute direction="vertical" spacing={60}>\n        <Ref refId="label" />\n        <Ref refId="mars" />\n      </Distribute>\n      <Arrow>\n        <Ref refId="label" />\n        <Ref refId="mars" />\n      </Arrow>\n    </Bluefish>\n  );\n};\n\nexport default App;\n',hideCode:!0,mdxType:"CodeEditor"}))))}f.isMDXComponent=!0},4621:(e,n,t)=>{t.d(n,{Z:()=>r});const r='import { Bluefish, Group, Row, Col, Circle, Text, Ref, Background, Arrow, Align, Distribute, Rect } from "@bluefish-js/solid";\n\nconst App = () => {\n  return (\n    <Bluefish>\n      {/* Bluefish is a diagramming library for SolidJS */}\n      {/* You can specify UI-like components such as Row and Background */}\n      <Background padding={20}>\n        <Row spacing={50}>\n          <Circle id="mercury" r={15} fill="#EBE3CF" stroke-width={3} stroke="black" />\n          <Circle r={36} fill="#DC933C" stroke-width={3} stroke="black" />\n          <Circle r={38} fill="#179DD7" stroke-width={3} stroke="black" />\n          <Circle r={21} fill="#F1CF8E" stroke-width={3} stroke="black" />\n        </Row>\n      </Background>\n      {/* But you can also use *relations* like Align and Distribute */}\n      <Align alignment="centerX">\n        <Text id="label">Mercury</Text>\n        {/* Bluefish lets you refer to previous components using a special `Ref` component. */}\n        <Ref refId="mercury" />\n      </Align>\n      <Distribute direction="vertical" spacing={60}>\n        <Ref refId="label" />\n        <Ref refId="mercury" />\n      </Distribute>\n      {/* In addition to performing layout, Bluefish relations can also draw objects. */}\n      <Arrow>\n        <Ref refId="label" />\n        <Ref refId="mercury" />\n      </Arrow>\n    </Bluefish>\n  );\n};\n\nexport default App;\n'}}]);