"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[404],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7777:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1},l="1. Your First Bluefish Component",i={unversionedId:"tutorial-plot/bluefish-1",id:"tutorial-plot/bluefish-1",title:"1. Your First Bluefish Component",description:"This tutorial assumes you have some familiarity with React. We recommend you take a look at [React's",source:"@site/docs/tutorial-plot/bluefish-1.md",sourceDirName:"tutorial-plot",slug:"/tutorial-plot/bluefish-1",permalink:"/docs/tutorial-plot/bluefish-1",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-plot/bluefish-1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Charts",permalink:"/docs/category/tutorial---charts"},next:{title:"2. A Tree Diagram Component",permalink:"/docs/tutorial-plot/bluefish-2"}},s={},u=[{value:"Goals of This Tutorial",id:"goals-of-this-tutorial",level:2},{value:"Let&#39;s Draw a Rectangle!",id:"lets-draw-a-rectangle",level:2},{value:"Aligning Two Shapes",id:"aligning-two-shapes",level:2},{value:"Multiple Alignments",id:"multiple-alignments",level:2},{value:"Creating a Reusable Bluefish Component",id:"creating-a-reusable-bluefish-component",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1-your-first-bluefish-component"},"1. Your First Bluefish Component"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This tutorial assumes you have some familiarity with React. We recommend you take a look at ",(0,o.kt)("a",{parentName:"p",href:"https://beta.reactjs.org/learn"},"React's\nquick start guide first."))),(0,o.kt)("h2",{id:"goals-of-this-tutorial"},"Goals of This Tutorial"),(0,o.kt)("p",null,"By the end of this tutorial you will have built a sophisticated tree component!"),(0,o.kt)("p",null,"In the process you will learn how to"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"draw basic shapes"),(0,o.kt)("li",{parentName:"ul"},"use ",(0,o.kt)("inlineCode",{parentName:"li"},"name")," to tag components"),(0,o.kt)("li",{parentName:"ul"},"use ",(0,o.kt)("inlineCode",{parentName:"li"},"Align"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Col"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"Row")),(0,o.kt)("li",{parentName:"ul"},"use ",(0,o.kt)("inlineCode",{parentName:"li"},"Ref")," to refer to components in different parts of the component tree"),(0,o.kt)("li",{parentName:"ul"},"create your own Bluefish component"),(0,o.kt)("li",{parentName:"ul"},"gradually abstract a component so users can customize it more easily")),(0,o.kt)("p",null,"Here's the data we'll be visualizing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const treeData = {\n  name: 'A',\n  value: 7,\n  subtrees: [\n    {\n      name: 'B',\n      value: 4,\n      subtrees: [\n        { name: 'C', value: 2, },\n        { name: 'D', value: 2, },\n      ],\n    },\n    {\n      name: 'E',\n      value: 3,\n      subtrees: [\n        { name: 'F', value: 2, },\n        { name: 'G', value: 1, },\n      ],\n    },\n  ],\n};\n")),(0,o.kt)("h2",{id:"lets-draw-a-rectangle"},"Let's Draw a Rectangle!"),(0,o.kt)("p",null,"First, let\u2019s get something rendered to the screen! We always have to wrap our Bluefish code in a top-level ",(0,o.kt)("inlineCode",{parentName:"p"},"SVG")," component."),(0,o.kt)("p",null,"Next, we make a ",(0,o.kt)("inlineCode",{parentName:"p"},"Rect")," component. The API for ",(0,o.kt)("inlineCode",{parentName:"p"},"Rect")," follows that of SVG."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Rect x={20} y={50} width={50} height={65} rx={5} fill={'cornflowerblue'} />\n</SVG>\n")),(0,o.kt)("h2",{id:"aligning-two-shapes"},"Aligning Two Shapes"),(0,o.kt)("p",null,"We can put two shapes in an ",(0,o.kt)("inlineCode",{parentName:"p"},"Align")," component, so they are aligned. In this case they are center\naligned."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Align center>\n    <Text contents={'b'} fontSize={'30px'} />\n    <Rect x={20} y={50} width={50} height={65} rx={5} fill={'cornflowerblue'} />\n  </Align>\n</SVG>\n")),(0,o.kt)("h2",{id:"multiple-alignments"},"Multiple Alignments"),(0,o.kt)("p",null,"To add a label to the box, we need to add a second piece of text and align it to the rectangle."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Align center>\n    <Text contents={'b'} fontSize={'30px'} />\n    <Rect x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n  </Align>\n  <Align center to={'topCenter'}>\n    <Text contents={'@A'} fontSize={'12px'} />\n    <Rect x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n  </Align>\n</SVG>\n")),(0,o.kt)("p",null,"But this will render two background rectangles! That\u2019s not what we want. Instead, but how do we\nrefer to the rectangle again? We can use Bluefish\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref")," component to refer to existing components!\nTo do so, we give the rectangle a ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", background, and then we refer to it in the second ",(0,o.kt)("inlineCode",{parentName:"p"},"Align"),"\ncomponent."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Align center>\n    <Text contents={'b'} fontSize={'30px'} />\n    <Rect name={'background'} x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n  </Align>\n  <Align center to={'topCenter'}>\n    <Text contents={'@A'} fontSize={'12px'} />\n    <Ref to={'background'} />\n  </Align>\n</SVG>\n")),(0,o.kt)("p",null,"We can also separate the primitive objects and alignments completely using refs! This can be useful\nfor organizing larger components."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"We currently need to wrap our components in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Group")," for reference resolution to work properly.\nThis is a bug.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<SVG width={200} height={200}>\n  <Group>\n    <Text name={'value'} contents={'b'} fontSize={'30px'} />\n    <Rect name={'background'} x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n    <Text name={'label'} contents={'@A'} fontSize={'12px'} />\n    <Align center>\n      <Ref to={'value'} />\n      <Ref to={'background'} />\n    </Align>\n    <Align center to={'topCenter'}>\n      <Ref to={'label'} />\n      <Ref to={'background'} />\n    </Align>\n  </Group>\n</SVG>\n")),(0,o.kt)("h2",{id:"creating-a-reusable-bluefish-component"},"Creating a Reusable Bluefish Component"),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Currently in Bluefish, all names exist in a shared ",(0,o.kt)("em",{parentName:"p"},"global")," namespace. Names like ",(0,o.kt)("inlineCode",{parentName:"p"},"value"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"background"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," from different instances of ",(0,o.kt)("inlineCode",{parentName:"p"},"Node")," components will clash with each other!"),(0,o.kt)("p",{parentName:"admonition"},"To avoid name clashes, consider using some sort of unique id, e.g. the ",(0,o.kt)("inlineCode",{parentName:"p"},"uuid")," package.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live noInline",live:!0,noInline:!0},"const Node = forwardRef(function _Node({ name, value }, ref) {\n  return (\n    <Group ref={ref}>\n      <Text name={'value'} contents={value} fontSize={'30px'} />\n      <Rect name={'background'} x={20} y={50} width={50} height={65} rx={5} fill={'none'} stroke={'cornflowerblue'} />\n      <Text name={'label'} contents={name} fontSize={'12px'} />\n      <Align center>\n        <Ref to={'value'} />\n        <Ref to={'background'} />\n      </Align>\n      <Align center to={'topCenter'}>\n        <Ref to={'label'} />\n        <Ref to={'background'} />\n      </Align>\n    </Group>\n  );\n})\n\nrender(\n  <SVG width={200} height={200}>\n    <Node name={'@A'} value={'b'} />\n  </SVG>\n)\n")))}c.isMDXComponent=!0}}]);